#! /bin/bash

printf "
     ___      ________    _____                __       
 __ / / | /| / /_  __/   / ___/______ __    __/ /__ ____
/ // /| |/ |/ / / /     / /__/ __/ _ \`/ |/|/ / / -_) __/
\___/ |__/|__/ /_/______\___/_/  \_,_/|__,__/_/\__/_/   
   ____                                        
  / __/__ ___  ____(_)___                               
 / _// -_) _ \/ __/ / __/                               
/_/  \__/_//_/_/ /_/_/                                  
\n\n\n"
printf "[*]     JWT_Crawler\n"
printf "[*]     Fenrir\n\n"

URL=""
tok_gen_location=""
username=""
password=""
outputFile=""
wordlist=""

if [ $# -eq 2 -a "$1" == "-f" ]
then
    printf "Parsing info from file: "$2"\n"
    if [ ! -r $2 ]
    then
        printf "Couldn't read config file\n"
        exit 1
    fi

    readarray -t confArray < $2

    #TODO: change config file format for a simple one?
    counter=0
    parsingOver=0
    while [ $parsingOver -lt 5 ]
    do
        argLine=`echo ${confArray[$counter]} | xargs`
        case $argLine in 
            ".URL:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid URL found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                URL=${argLine:1:$((${#argLine}-1))}
                parsingOver=$(($parsingOver+1))
                echo "Found URL: "$URL
                ;;
            ".GENERATOR:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid token generator location found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                tok_gen_location=${argLine:1:$((${#argLine}-1))}
                parsingOver=$(($parsingOver+1))
                echo "Found token generator location: "$tok_gen_location
                ;;
            ".USER:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid username found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                username=${argLine:1:$((${#argLine}-1))}
                parsingOver=$(($parsingOver+1))
                echo "Found username: "$username
                ;;
            ".PASS:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid password found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                password=${argLine:1:$((${#argLine}-1))}
                parsingOver=$(($parsingOver+1))
                echo "Found password: "$password
                ;;
            ".OUTPUT:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid output file found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                outputFile=${argLine:1:$((${#argLine}-1))}
                echo "Found output file: "$outputFile
                ;;
            ".WORDLIST:")
                counter=$(($counter+1))
                #Removing the whitespaces
                argLine=`echo ${confArray[$counter]} | xargs`
                #Checking the input is valid
                if [ ${argLine:0:1} != "#" ]
                then
                    echo "Invalid word list found. Found: "$argLine" instead"
                    exit 1
                fi
                #Skipping the '#"' and the last ' " '
                wordlist=${argLine:1:$((${#argLine}-1))}
                parsingOver=$(($parsingOver+1))
                echo "Found word list: "$wordlist
                ;;
            *)
                echo "Found unrecognized keyword in line: " ${confArray[$counter]}
                echo "inside config file "$2 
                echo "Exiting..."
                exit 1
                ;;
        esac
        counter=$(($counter+1))
    done

    echo "Done parsing config file. Moving on..."

    #exit
else
    printf "Usage: JWT_Crawler_Config_File -f config_file\n"
    exit 1
fi

#URL sanitization
if [ ${URL:0:7} != "http://" -o ${URL:0:8} != "https://" ] 
then 
    URL="http://"$URL
fi
if [ ${URL:$((${#URL}-1)):1} != "/" ]
then
    URL=$URL/
fi

#Checking if word list exists
if [ ! -r $wordlist ]
then
    echo "Unable to read wordlist!"
    exit 1
fi

#Checking if word list isn't empty
if [ `wc -c $wordlist | sed s/$wordlist//g` -eq 0 ]
then 
    echo "Word list is empty."
    exit 1
else
    echo "Word list has been found and is valid."
fi

#In case the output file already exists
if [ -f $outputFile ]
then
    echo "The output file already exists."
    echo "What do you want to do?[c]ontinue, [r]ename:"
    read answer

    while [ ${answer:0:1} != 'r' -o ${answer:0:1} != 'c' ]
    do
        echo "What do you want to do?[c]ontinue, [r]ename:"
        read answer
    done

    if [ ${answer:0:1} == 'r']
    then
        read outputFile
    fi
fi

if [ -n $outputFile ]
then
    #Checking if created and if writeable
    touch $outputFile

    while [ ! -w $outputFile ]
    do 
        echo "Output file is not writeable"
        echo "What do you want to do?[e]xit, [r]ename:"
        read answer

        while [ ${answer:0:1} != 'r' -o ${answer:0:1} != 'e' ]
        do
            echo "What do you want to do?[e]xit, [r]ename:"
            read answer
        done
        if [ ${answer:0:1} == 'r']
        then
            read outputFile
            touch $outputFile
        fi
        if [ ${answer:0:1} == 'e']
        then
            exit 1
        fi

    done

fi

printf "Trying to get token from: $URL$tok_gen_location with data: {\"username\":\"$username\",\"password\":\"$password\"}"
TOKEN=$(curl -s -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' --data '{"username":$username,"password":$password}' $URL$tok_gen_location | jq -r)
printf "\nToken should be "$TOKEN"\n"

if [ -n $outputFile ]
then
    printf "Target URL is "$URL > $outputFile
else
    printf "Target URL is "$URL 
fi
#TODO: Recursive mode?
for word in `cat "$wordlist"`
do
    if [ -n $outputFile ]
    then
        printf "\nGetting $word" >> $outputFile
    fi
    printf "\nGetting $word"
    curl -H 'Accept: application/json' -H "Authorization: Bearer ${TOKEN}" $URL$word >> $outputFile
done

if [ -n $outputFile ]
then
    printf "\nResult is in file $outputFile\n"
fi